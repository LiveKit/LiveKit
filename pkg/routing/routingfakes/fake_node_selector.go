// Code generated by counterfeiter. DO NOT EDIT.
package routingfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/routing"
	livekit "github.com/livekit/protocol/proto"
)

type FakeNodeSelector struct {
	SelectNodeStub        func([]*livekit.Node, *livekit.Room, livekit.NodeType) (*livekit.Node, error)
	selectNodeMutex       sync.RWMutex
	selectNodeArgsForCall []struct {
		arg1 []*livekit.Node
		arg2 *livekit.Room
		arg3 livekit.NodeType
	}
	selectNodeReturns struct {
		result1 *livekit.Node
		result2 error
	}
	selectNodeReturnsOnCall map[int]struct {
		result1 *livekit.Node
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNodeSelector) SelectNode(arg1 []*livekit.Node, arg2 *livekit.Room, arg3 livekit.NodeType) (*livekit.Node, error) {
	var arg1Copy []*livekit.Node
	if arg1 != nil {
		arg1Copy = make([]*livekit.Node, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.selectNodeMutex.Lock()
	ret, specificReturn := fake.selectNodeReturnsOnCall[len(fake.selectNodeArgsForCall)]
	fake.selectNodeArgsForCall = append(fake.selectNodeArgsForCall, struct {
		arg1 []*livekit.Node
		arg2 *livekit.Room
		arg3 livekit.NodeType
	}{arg1Copy, arg2, arg3})
	stub := fake.SelectNodeStub
	fakeReturns := fake.selectNodeReturns
	fake.recordInvocation("SelectNode", []interface{}{arg1Copy, arg2, arg3})
	fake.selectNodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeNodeSelector) SelectNodeCallCount() int {
	fake.selectNodeMutex.RLock()
	defer fake.selectNodeMutex.RUnlock()
	return len(fake.selectNodeArgsForCall)
}

func (fake *FakeNodeSelector) SelectNodeCalls(stub func([]*livekit.Node, *livekit.Room, livekit.NodeType) (*livekit.Node, error)) {
	fake.selectNodeMutex.Lock()
	defer fake.selectNodeMutex.Unlock()
	fake.SelectNodeStub = stub
}

func (fake *FakeNodeSelector) SelectNodeArgsForCall(i int) ([]*livekit.Node, *livekit.Room, livekit.NodeType) {
	fake.selectNodeMutex.RLock()
	defer fake.selectNodeMutex.RUnlock()
	argsForCall := fake.selectNodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeNodeSelector) SelectNodeReturns(result1 *livekit.Node, result2 error) {
	fake.selectNodeMutex.Lock()
	defer fake.selectNodeMutex.Unlock()
	fake.SelectNodeStub = nil
	fake.selectNodeReturns = struct {
		result1 *livekit.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeSelector) SelectNodeReturnsOnCall(i int, result1 *livekit.Node, result2 error) {
	fake.selectNodeMutex.Lock()
	defer fake.selectNodeMutex.Unlock()
	fake.SelectNodeStub = nil
	if fake.selectNodeReturnsOnCall == nil {
		fake.selectNodeReturnsOnCall = make(map[int]struct {
			result1 *livekit.Node
			result2 error
		})
	}
	fake.selectNodeReturnsOnCall[i] = struct {
		result1 *livekit.Node
		result2 error
	}{result1, result2}
}

func (fake *FakeNodeSelector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.selectNodeMutex.RLock()
	defer fake.selectNodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNodeSelector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ routing.NodeSelector = new(FakeNodeSelector)
