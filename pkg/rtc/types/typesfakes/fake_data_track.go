// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/rtc/types"
	"github.com/livekit/livekit-server/pkg/sfu"
	"github.com/livekit/protocol/livekit"
)

type FakeDataTrack struct {
	AddOnCloseStub        func(func())
	addOnCloseMutex       sync.RWMutex
	addOnCloseArgsForCall []struct {
		arg1 func()
	}
	KindStub        func() livekit.TrackType
	kindMutex       sync.RWMutex
	kindArgsForCall []struct {
	}
	kindReturns struct {
		result1 livekit.TrackType
	}
	kindReturnsOnCall map[int]struct {
		result1 livekit.TrackType
	}
	OnDataPacketStub        func(func(*livekit.DataPacket))
	onDataPacketMutex       sync.RWMutex
	onDataPacketArgsForCall []struct {
		arg1 func(*livekit.DataPacket)
	}
	ReceiverStub        func() sfu.TrackReceiver
	receiverMutex       sync.RWMutex
	receiverArgsForCall []struct {
	}
	receiverReturns struct {
		result1 sfu.TrackReceiver
	}
	receiverReturnsOnCall map[int]struct {
		result1 sfu.TrackReceiver
	}
	TrackIDStub        func() livekit.TrackID
	trackIDMutex       sync.RWMutex
	trackIDArgsForCall []struct {
	}
	trackIDReturns struct {
		result1 livekit.TrackID
	}
	trackIDReturnsOnCall map[int]struct {
		result1 livekit.TrackID
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDataTrack) AddOnClose(arg1 func()) {
	fake.addOnCloseMutex.Lock()
	fake.addOnCloseArgsForCall = append(fake.addOnCloseArgsForCall, struct {
		arg1 func()
	}{arg1})
	stub := fake.AddOnCloseStub
	fake.recordInvocation("AddOnClose", []interface{}{arg1})
	fake.addOnCloseMutex.Unlock()
	if stub != nil {
		fake.AddOnCloseStub(arg1)
	}
}

func (fake *FakeDataTrack) AddOnCloseCallCount() int {
	fake.addOnCloseMutex.RLock()
	defer fake.addOnCloseMutex.RUnlock()
	return len(fake.addOnCloseArgsForCall)
}

func (fake *FakeDataTrack) AddOnCloseCalls(stub func(func())) {
	fake.addOnCloseMutex.Lock()
	defer fake.addOnCloseMutex.Unlock()
	fake.AddOnCloseStub = stub
}

func (fake *FakeDataTrack) AddOnCloseArgsForCall(i int) func() {
	fake.addOnCloseMutex.RLock()
	defer fake.addOnCloseMutex.RUnlock()
	argsForCall := fake.addOnCloseArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataTrack) Kind() livekit.TrackType {
	fake.kindMutex.Lock()
	ret, specificReturn := fake.kindReturnsOnCall[len(fake.kindArgsForCall)]
	fake.kindArgsForCall = append(fake.kindArgsForCall, struct {
	}{})
	stub := fake.KindStub
	fakeReturns := fake.kindReturns
	fake.recordInvocation("Kind", []interface{}{})
	fake.kindMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataTrack) KindCallCount() int {
	fake.kindMutex.RLock()
	defer fake.kindMutex.RUnlock()
	return len(fake.kindArgsForCall)
}

func (fake *FakeDataTrack) KindCalls(stub func() livekit.TrackType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = stub
}

func (fake *FakeDataTrack) KindReturns(result1 livekit.TrackType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = nil
	fake.kindReturns = struct {
		result1 livekit.TrackType
	}{result1}
}

func (fake *FakeDataTrack) KindReturnsOnCall(i int, result1 livekit.TrackType) {
	fake.kindMutex.Lock()
	defer fake.kindMutex.Unlock()
	fake.KindStub = nil
	if fake.kindReturnsOnCall == nil {
		fake.kindReturnsOnCall = make(map[int]struct {
			result1 livekit.TrackType
		})
	}
	fake.kindReturnsOnCall[i] = struct {
		result1 livekit.TrackType
	}{result1}
}

func (fake *FakeDataTrack) OnDataPacket(arg1 func(*livekit.DataPacket)) {
	fake.onDataPacketMutex.Lock()
	fake.onDataPacketArgsForCall = append(fake.onDataPacketArgsForCall, struct {
		arg1 func(*livekit.DataPacket)
	}{arg1})
	stub := fake.OnDataPacketStub
	fake.recordInvocation("OnDataPacket", []interface{}{arg1})
	fake.onDataPacketMutex.Unlock()
	if stub != nil {
		fake.OnDataPacketStub(arg1)
	}
}

func (fake *FakeDataTrack) OnDataPacketCallCount() int {
	fake.onDataPacketMutex.RLock()
	defer fake.onDataPacketMutex.RUnlock()
	return len(fake.onDataPacketArgsForCall)
}

func (fake *FakeDataTrack) OnDataPacketCalls(stub func(func(*livekit.DataPacket))) {
	fake.onDataPacketMutex.Lock()
	defer fake.onDataPacketMutex.Unlock()
	fake.OnDataPacketStub = stub
}

func (fake *FakeDataTrack) OnDataPacketArgsForCall(i int) func(*livekit.DataPacket) {
	fake.onDataPacketMutex.RLock()
	defer fake.onDataPacketMutex.RUnlock()
	argsForCall := fake.onDataPacketArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDataTrack) Receiver() sfu.TrackReceiver {
	fake.receiverMutex.Lock()
	ret, specificReturn := fake.receiverReturnsOnCall[len(fake.receiverArgsForCall)]
	fake.receiverArgsForCall = append(fake.receiverArgsForCall, struct {
	}{})
	stub := fake.ReceiverStub
	fakeReturns := fake.receiverReturns
	fake.recordInvocation("Receiver", []interface{}{})
	fake.receiverMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataTrack) ReceiverCallCount() int {
	fake.receiverMutex.RLock()
	defer fake.receiverMutex.RUnlock()
	return len(fake.receiverArgsForCall)
}

func (fake *FakeDataTrack) ReceiverCalls(stub func() sfu.TrackReceiver) {
	fake.receiverMutex.Lock()
	defer fake.receiverMutex.Unlock()
	fake.ReceiverStub = stub
}

func (fake *FakeDataTrack) ReceiverReturns(result1 sfu.TrackReceiver) {
	fake.receiverMutex.Lock()
	defer fake.receiverMutex.Unlock()
	fake.ReceiverStub = nil
	fake.receiverReturns = struct {
		result1 sfu.TrackReceiver
	}{result1}
}

func (fake *FakeDataTrack) ReceiverReturnsOnCall(i int, result1 sfu.TrackReceiver) {
	fake.receiverMutex.Lock()
	defer fake.receiverMutex.Unlock()
	fake.ReceiverStub = nil
	if fake.receiverReturnsOnCall == nil {
		fake.receiverReturnsOnCall = make(map[int]struct {
			result1 sfu.TrackReceiver
		})
	}
	fake.receiverReturnsOnCall[i] = struct {
		result1 sfu.TrackReceiver
	}{result1}
}

func (fake *FakeDataTrack) TrackID() livekit.TrackID {
	fake.trackIDMutex.Lock()
	ret, specificReturn := fake.trackIDReturnsOnCall[len(fake.trackIDArgsForCall)]
	fake.trackIDArgsForCall = append(fake.trackIDArgsForCall, struct {
	}{})
	stub := fake.TrackIDStub
	fakeReturns := fake.trackIDReturns
	fake.recordInvocation("TrackID", []interface{}{})
	fake.trackIDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDataTrack) TrackIDCallCount() int {
	fake.trackIDMutex.RLock()
	defer fake.trackIDMutex.RUnlock()
	return len(fake.trackIDArgsForCall)
}

func (fake *FakeDataTrack) TrackIDCalls(stub func() livekit.TrackID) {
	fake.trackIDMutex.Lock()
	defer fake.trackIDMutex.Unlock()
	fake.TrackIDStub = stub
}

func (fake *FakeDataTrack) TrackIDReturns(result1 livekit.TrackID) {
	fake.trackIDMutex.Lock()
	defer fake.trackIDMutex.Unlock()
	fake.TrackIDStub = nil
	fake.trackIDReturns = struct {
		result1 livekit.TrackID
	}{result1}
}

func (fake *FakeDataTrack) TrackIDReturnsOnCall(i int, result1 livekit.TrackID) {
	fake.trackIDMutex.Lock()
	defer fake.trackIDMutex.Unlock()
	fake.TrackIDStub = nil
	if fake.trackIDReturnsOnCall == nil {
		fake.trackIDReturnsOnCall = make(map[int]struct {
			result1 livekit.TrackID
		})
	}
	fake.trackIDReturnsOnCall[i] = struct {
		result1 livekit.TrackID
	}{result1}
}

func (fake *FakeDataTrack) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addOnCloseMutex.RLock()
	defer fake.addOnCloseMutex.RUnlock()
	fake.kindMutex.RLock()
	defer fake.kindMutex.RUnlock()
	fake.onDataPacketMutex.RLock()
	defer fake.onDataPacketMutex.RUnlock()
	fake.receiverMutex.RLock()
	defer fake.receiverMutex.RUnlock()
	fake.trackIDMutex.RLock()
	defer fake.trackIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDataTrack) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.DataTrack = new(FakeDataTrack)
