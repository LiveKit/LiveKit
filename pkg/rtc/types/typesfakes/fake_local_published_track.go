// Code generated by counterfeiter. DO NOT EDIT.
package typesfakes

import (
	"sync"

	"github.com/livekit/livekit-server/pkg/rtc/types"
)

type FakeLocalPublishedTrack struct {
	GetAudioLevelStub        func() (uint8, bool)
	getAudioLevelMutex       sync.RWMutex
	getAudioLevelArgsForCall []struct {
	}
	getAudioLevelReturns struct {
		result1 uint8
		result2 bool
	}
	getAudioLevelReturnsOnCall map[int]struct {
		result1 uint8
		result2 bool
	}
	GetConnectionScoreStub        func() float64
	getConnectionScoreMutex       sync.RWMutex
	getConnectionScoreArgsForCall []struct {
	}
	getConnectionScoreReturns struct {
		result1 float64
	}
	getConnectionScoreReturnsOnCall map[int]struct {
		result1 float64
	}
	SdpCidStub        func() string
	sdpCidMutex       sync.RWMutex
	sdpCidArgsForCall []struct {
	}
	sdpCidReturns struct {
		result1 string
	}
	sdpCidReturnsOnCall map[int]struct {
		result1 string
	}
	SignalCidStub        func() string
	signalCidMutex       sync.RWMutex
	signalCidArgsForCall []struct {
	}
	signalCidReturns struct {
		result1 string
	}
	signalCidReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLocalPublishedTrack) GetAudioLevel() (uint8, bool) {
	fake.getAudioLevelMutex.Lock()
	ret, specificReturn := fake.getAudioLevelReturnsOnCall[len(fake.getAudioLevelArgsForCall)]
	fake.getAudioLevelArgsForCall = append(fake.getAudioLevelArgsForCall, struct {
	}{})
	stub := fake.GetAudioLevelStub
	fakeReturns := fake.getAudioLevelReturns
	fake.recordInvocation("GetAudioLevel", []interface{}{})
	fake.getAudioLevelMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLocalPublishedTrack) GetAudioLevelCallCount() int {
	fake.getAudioLevelMutex.RLock()
	defer fake.getAudioLevelMutex.RUnlock()
	return len(fake.getAudioLevelArgsForCall)
}

func (fake *FakeLocalPublishedTrack) GetAudioLevelCalls(stub func() (uint8, bool)) {
	fake.getAudioLevelMutex.Lock()
	defer fake.getAudioLevelMutex.Unlock()
	fake.GetAudioLevelStub = stub
}

func (fake *FakeLocalPublishedTrack) GetAudioLevelReturns(result1 uint8, result2 bool) {
	fake.getAudioLevelMutex.Lock()
	defer fake.getAudioLevelMutex.Unlock()
	fake.GetAudioLevelStub = nil
	fake.getAudioLevelReturns = struct {
		result1 uint8
		result2 bool
	}{result1, result2}
}

func (fake *FakeLocalPublishedTrack) GetAudioLevelReturnsOnCall(i int, result1 uint8, result2 bool) {
	fake.getAudioLevelMutex.Lock()
	defer fake.getAudioLevelMutex.Unlock()
	fake.GetAudioLevelStub = nil
	if fake.getAudioLevelReturnsOnCall == nil {
		fake.getAudioLevelReturnsOnCall = make(map[int]struct {
			result1 uint8
			result2 bool
		})
	}
	fake.getAudioLevelReturnsOnCall[i] = struct {
		result1 uint8
		result2 bool
	}{result1, result2}
}

func (fake *FakeLocalPublishedTrack) GetConnectionScore() float64 {
	fake.getConnectionScoreMutex.Lock()
	ret, specificReturn := fake.getConnectionScoreReturnsOnCall[len(fake.getConnectionScoreArgsForCall)]
	fake.getConnectionScoreArgsForCall = append(fake.getConnectionScoreArgsForCall, struct {
	}{})
	stub := fake.GetConnectionScoreStub
	fakeReturns := fake.getConnectionScoreReturns
	fake.recordInvocation("GetConnectionScore", []interface{}{})
	fake.getConnectionScoreMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLocalPublishedTrack) GetConnectionScoreCallCount() int {
	fake.getConnectionScoreMutex.RLock()
	defer fake.getConnectionScoreMutex.RUnlock()
	return len(fake.getConnectionScoreArgsForCall)
}

func (fake *FakeLocalPublishedTrack) GetConnectionScoreCalls(stub func() float64) {
	fake.getConnectionScoreMutex.Lock()
	defer fake.getConnectionScoreMutex.Unlock()
	fake.GetConnectionScoreStub = stub
}

func (fake *FakeLocalPublishedTrack) GetConnectionScoreReturns(result1 float64) {
	fake.getConnectionScoreMutex.Lock()
	defer fake.getConnectionScoreMutex.Unlock()
	fake.GetConnectionScoreStub = nil
	fake.getConnectionScoreReturns = struct {
		result1 float64
	}{result1}
}

func (fake *FakeLocalPublishedTrack) GetConnectionScoreReturnsOnCall(i int, result1 float64) {
	fake.getConnectionScoreMutex.Lock()
	defer fake.getConnectionScoreMutex.Unlock()
	fake.GetConnectionScoreStub = nil
	if fake.getConnectionScoreReturnsOnCall == nil {
		fake.getConnectionScoreReturnsOnCall = make(map[int]struct {
			result1 float64
		})
	}
	fake.getConnectionScoreReturnsOnCall[i] = struct {
		result1 float64
	}{result1}
}

func (fake *FakeLocalPublishedTrack) SdpCid() string {
	fake.sdpCidMutex.Lock()
	ret, specificReturn := fake.sdpCidReturnsOnCall[len(fake.sdpCidArgsForCall)]
	fake.sdpCidArgsForCall = append(fake.sdpCidArgsForCall, struct {
	}{})
	stub := fake.SdpCidStub
	fakeReturns := fake.sdpCidReturns
	fake.recordInvocation("SdpCid", []interface{}{})
	fake.sdpCidMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLocalPublishedTrack) SdpCidCallCount() int {
	fake.sdpCidMutex.RLock()
	defer fake.sdpCidMutex.RUnlock()
	return len(fake.sdpCidArgsForCall)
}

func (fake *FakeLocalPublishedTrack) SdpCidCalls(stub func() string) {
	fake.sdpCidMutex.Lock()
	defer fake.sdpCidMutex.Unlock()
	fake.SdpCidStub = stub
}

func (fake *FakeLocalPublishedTrack) SdpCidReturns(result1 string) {
	fake.sdpCidMutex.Lock()
	defer fake.sdpCidMutex.Unlock()
	fake.SdpCidStub = nil
	fake.sdpCidReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalPublishedTrack) SdpCidReturnsOnCall(i int, result1 string) {
	fake.sdpCidMutex.Lock()
	defer fake.sdpCidMutex.Unlock()
	fake.SdpCidStub = nil
	if fake.sdpCidReturnsOnCall == nil {
		fake.sdpCidReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.sdpCidReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalPublishedTrack) SignalCid() string {
	fake.signalCidMutex.Lock()
	ret, specificReturn := fake.signalCidReturnsOnCall[len(fake.signalCidArgsForCall)]
	fake.signalCidArgsForCall = append(fake.signalCidArgsForCall, struct {
	}{})
	stub := fake.SignalCidStub
	fakeReturns := fake.signalCidReturns
	fake.recordInvocation("SignalCid", []interface{}{})
	fake.signalCidMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLocalPublishedTrack) SignalCidCallCount() int {
	fake.signalCidMutex.RLock()
	defer fake.signalCidMutex.RUnlock()
	return len(fake.signalCidArgsForCall)
}

func (fake *FakeLocalPublishedTrack) SignalCidCalls(stub func() string) {
	fake.signalCidMutex.Lock()
	defer fake.signalCidMutex.Unlock()
	fake.SignalCidStub = stub
}

func (fake *FakeLocalPublishedTrack) SignalCidReturns(result1 string) {
	fake.signalCidMutex.Lock()
	defer fake.signalCidMutex.Unlock()
	fake.SignalCidStub = nil
	fake.signalCidReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalPublishedTrack) SignalCidReturnsOnCall(i int, result1 string) {
	fake.signalCidMutex.Lock()
	defer fake.signalCidMutex.Unlock()
	fake.SignalCidStub = nil
	if fake.signalCidReturnsOnCall == nil {
		fake.signalCidReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.signalCidReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalPublishedTrack) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAudioLevelMutex.RLock()
	defer fake.getAudioLevelMutex.RUnlock()
	fake.getConnectionScoreMutex.RLock()
	defer fake.getConnectionScoreMutex.RUnlock()
	fake.sdpCidMutex.RLock()
	defer fake.sdpCidMutex.RUnlock()
	fake.signalCidMutex.RLock()
	defer fake.signalCidMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLocalPublishedTrack) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ types.LocalPublishedTrack = new(FakeLocalPublishedTrack)
