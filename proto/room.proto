syntax = "proto3";

package livekit;
option go_package = "github.com/livekit/livekit-server/proto/livekit";

import "model.proto";

// Room service that can be performed on any node
// they are Twirp-based HTTP req/responses
service RoomService {

  // should be accessible to only internal servers, not external
  rpc CreateRoom(CreateRoomRequest) returns (Room);
  rpc ListRooms(ListRoomsRequest) returns (ListRoomsResponse);
  rpc DeleteRoom(DeleteRoomRequest) returns (DeleteRoomResponse);

  // lists participants in a room, requires RoomAdmin
  rpc ListParticipants(ListParticipantsRequest) returns (ListParticipantsResponse);
  // get information on a specific participant, requires RoomAdmin
  rpc GetParticipant(RoomParticipantIdentity) returns (ParticipantInfo);
  // removes a participant from room, requires RoomAdmin
  rpc RemoveParticipant(RoomParticipantIdentity) returns (RemoveParticipantResponse);

  // mute/unmute a participant, requires RoomAdmin
  rpc MutePublishedTrack(MuteRoomTrackRequest) returns (MuteRoomTrackResponse);
}

message CreateRoomRequest {
  string name = 1;
  // number of seconds the room should cleanup after being empty
  uint32 empty_timeout = 2;
  uint32 max_participants = 3;
  // override the node room is allocated to, for debugging
  string node_id = 4;
}

message ListRoomsRequest {
}

message ListRoomsResponse {
  repeated Room rooms = 1;
}

message DeleteRoomRequest {
  string room = 1;
}

message DeleteRoomResponse {
}

message ListParticipantsRequest {
  string room = 1;
}

message ListParticipantsResponse {
  repeated ParticipantInfo participants = 1;
}

message RoomParticipantIdentity {
  string room = 1;
  string identity = 2;
}

message RemoveParticipantResponse {
}

message MuteRoomTrackRequest {
  string room = 1;
  string identity = 2;
  string track_sid = 3;
  bool muted = 4;
}

message MuteRoomTrackResponse {
  TrackInfo track = 1;
}